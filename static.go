// Code generated by "esc -o static.go -ignore \.map$ app"; DO NOT EDIT.

package main

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"io/ioutil"
	"net/http"
	"os"
	"path"
	"sync"
	"time"
)

type _escLocalFS struct{}

var _escLocal _escLocalFS

type _escStaticFS struct{}

var _escStatic _escStaticFS

type _escDirectory struct {
	fs   http.FileSystem
	name string
}

type _escFile struct {
	compressed string
	size       int64
	modtime    int64
	local      string
	isDir      bool

	once sync.Once
	data []byte
	name string
}

func (_escLocalFS) Open(name string) (http.File, error) {
	f, present := _escData[path.Clean(name)]
	if !present {
		return nil, os.ErrNotExist
	}
	return os.Open(f.local)
}

func (_escStaticFS) prepare(name string) (*_escFile, error) {
	f, present := _escData[path.Clean(name)]
	if !present {
		return nil, os.ErrNotExist
	}
	var err error
	f.once.Do(func() {
		f.name = path.Base(name)
		if f.size == 0 {
			return
		}
		var gr *gzip.Reader
		b64 := base64.NewDecoder(base64.StdEncoding, bytes.NewBufferString(f.compressed))
		gr, err = gzip.NewReader(b64)
		if err != nil {
			return
		}
		f.data, err = ioutil.ReadAll(gr)
	})
	if err != nil {
		return nil, err
	}
	return f, nil
}

func (fs _escStaticFS) Open(name string) (http.File, error) {
	f, err := fs.prepare(name)
	if err != nil {
		return nil, err
	}
	return f.File()
}

func (dir _escDirectory) Open(name string) (http.File, error) {
	return dir.fs.Open(dir.name + name)
}

func (f *_escFile) File() (http.File, error) {
	type httpFile struct {
		*bytes.Reader
		*_escFile
	}
	return &httpFile{
		Reader:   bytes.NewReader(f.data),
		_escFile: f,
	}, nil
}

func (f *_escFile) Close() error {
	return nil
}

func (f *_escFile) Readdir(count int) ([]os.FileInfo, error) {
	return nil, nil
}

func (f *_escFile) Stat() (os.FileInfo, error) {
	return f, nil
}

func (f *_escFile) Name() string {
	return f.name
}

func (f *_escFile) Size() int64 {
	return f.size
}

func (f *_escFile) Mode() os.FileMode {
	return 0
}

func (f *_escFile) ModTime() time.Time {
	return time.Unix(f.modtime, 0)
}

func (f *_escFile) IsDir() bool {
	return f.isDir
}

func (f *_escFile) Sys() interface{} {
	return f
}

// FS returns a http.Filesystem for the embedded assets. If useLocal is true,
// the filesystem's contents are instead used.
func FS(useLocal bool) http.FileSystem {
	if useLocal {
		return _escLocal
	}
	return _escStatic
}

// Dir returns a http.Filesystem for the embedded assets on a given prefix dir.
// If useLocal is true, the filesystem's contents are instead used.
func Dir(useLocal bool, name string) http.FileSystem {
	if useLocal {
		return _escDirectory{fs: _escLocal, name: name}
	}
	return _escDirectory{fs: _escStatic, name: name}
}

// FSByte returns the named file from the embedded assets. If useLocal is
// true, the filesystem's contents are instead used.
func FSByte(useLocal bool, name string) ([]byte, error) {
	if useLocal {
		f, err := _escLocal.Open(name)
		if err != nil {
			return nil, err
		}
		b, err := ioutil.ReadAll(f)
		_ = f.Close()
		return b, err
	}
	f, err := _escStatic.prepare(name)
	if err != nil {
		return nil, err
	}
	return f.data, nil
}

// FSMustByte is the same as FSByte, but panics if name is not present.
func FSMustByte(useLocal bool, name string) []byte {
	b, err := FSByte(useLocal, name)
	if err != nil {
		panic(err)
	}
	return b
}

// FSString is the string version of FSByte.
func FSString(useLocal bool, name string) (string, error) {
	b, err := FSByte(useLocal, name)
	return string(b), err
}

// FSMustString is the string version of FSMustByte.
func FSMustString(useLocal bool, name string) string {
	return string(FSMustByte(useLocal, name))
}

var _escData = map[string]*_escFile{

	"/app/room.js": {
		local:   "app/room.js",
		size:    3468,
		modtime: 1521422171,
		compressed: `
H4sIAAAAAAAC/4xXW2/bOhJ+16+Y9UMtbxzJ2Quw9cILdNs8ZNEbmi56gKI4oMmxxUQiBXJkJSfwfz8Y
UpZkO73kIbI4l2+G/GY42gkHYotGCVjB0z4J75L0Dl83CCuYTsOSbPDDZuORYAWLbJEcFl8XwmxZz2AL
1zs0lE775eksSfIcanQb6yphJH7WFQI5Ie89UIHg0e3QXXqtEIhl0lqntBGEnk1FUHsE4RCwCusKNs5W
I+ssxHIKEiP6gutbK++R0knrl3k+uYDSSkHamqywnuBimrc+PzHu4pYNevBkHcZgw3tbaFlAIXYIa0QD
whjbGIkK1o+joPwcRGnNFlpNBTtjEWfowW74RTuwUjbOoZGYAXwutIdWlyWIshWPHkRdo3CgDVin0LGZ
Q4m6pjn78za4LIUnDuzIdI3HMrKjgIOTHaosyfM+S97fkKliwJAGuUZS43DJSk/8D1h3CRNtyNnJHMJf
noMRFXJ4ssGoJmgJV/+8evm3q6t/LV6+/Ps/glo4X0HdDnYbCq3wfUhsvU9ODiMLAa7g67dwKF4bGajp
kBpn4smYplrHLap0WWqP0hrlo25UEBUqxssAbjYHcPZXCA/GEjwiHQ5EzUFT71+Awa3ggoCdKBvMzgLs
Q1rBpjGSyZXKBt+LCmfwlABAiQTGtrCCN4IwM7ZNZwkLmLkuFNXlVVigQvuQcbax7lrIIh1cds4AQG8g
lawGqxUcQ8W/6POdoCITa58y9iXITNCs09nzcx+DiJnyI9knZ9kJpUJdv9We0KBLp7ZGM50PueKuw5bW
eFtiVtptOpHWGJRcr2TH1Rl4MJklDP5zLFlajz8HO/UPwU79Mgw6Z90RjHPP4QS9jq/abM/yWsLkAtj2
F3Er9F5sn0+QuWGw7dtwEqvt3TnD///+5jfA2srih2RjAdPif7cf3me1cB5T3GVKkIhyZhXBarWCxijc
aINqIFUkSWBNr/xMpcJfVkD8Y7Dscwjrg4fuBulqm7mf8Rb+XlttyMOLF8cL5wVBNYN0KKFm6sYX6agM
Qr+imnHnwyq3p1gRKdWZjdfaX+FqsVj05RF3ZD87pBrcl2i2VMB/YDFk1xcshEr0xztEmRSND2U6kQ1O
BrvTvVPa14JkEe/Q/gqd9fmNaXhomF1DvgjIX0cxXl59C4cQo9l395lDQXhtdtpZU6Eh8Egemjr0uBZE
o7RlIMIHAmFCP15r5llU+ITemsD1V0H1VqJBVoRPlq9kC5qSw/Gcw6Wjbijpobuig6vXEXREVB98r45x
g24q6SHqBZ3MNlQ3lHX9hqWZQk88LGhrxpoeiQP96GyNjjT6tNvcEWXyPCajdIXGa2v8IGu1omLJRMkW
Iz4VqLcFna8rrHv1A6/mzyJ+EWUJlSB0WpQjwBI3tIQpOWF8LRwamo78uwj7PfHGWfMD8VrI++9LlW3N
96VNfSIb3ypHl8rTQF8+4CUf/MFROJRlfHREHfH01jZOYvfCDDxln48Kh2mQLbd6xyNZEGOJgeM3b3jo
4Bs/SrnMtCj7OfAw8Dhrq1PyxhiYUnPQas42h5YTOOokVz09ZFH9HSotriNuZ6qsbPg12yJ1kv8+3qhU
q1nHTCeZlx+t16GplVZmDwEpe4yPP4421DvZbVNphXoVJ3f+GSeh8YXUCbk+8QFlQ3HCitP+WysUqnQG
YkPoeODRPIiR08iTWL8RA0p6SH2DJIt0mkdH2Z23Zho6TUYFmqE/O/T16QUCvBhM0tm/hxZ7Ynk3auz9
x8nd0UIX/13fqOOmjIWckRRliQraAuMp185unagOXnn6C1NxGS3OPi3yHG6IrSR6330HiGFf+wZalt1c
D6119+h8NmzhUcDxJeS3T5Lx7ibJnwEAAP//amTjXowNAAA=
`,
	},

	"/": {
		isDir: true,
		local: "",
	},

	"/app": {
		isDir: true,
		local: "app",
	},
}
